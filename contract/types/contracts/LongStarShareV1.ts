/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ILongStarShareV1 {
  export type EditionInitializationStruct = { keyNft: AddressLike };

  export type EditionInitializationStructOutput = [keyNft: string] & {
    keyNft: string;
  };
}

export interface LongStarShareV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "blastYieldContract"
      | "blastYieldContract()"
      | "buyShares"
      | "buyShares(address,uint256)"
      | "claimYield"
      | "claimYield(uint256,address[])"
      | "getBuyPrice"
      | "getBuyPrice(address,uint256)"
      | "getPrice"
      | "getPrice(uint256,uint256)"
      | "getSellPrice"
      | "getSellPrice(address,uint256)"
      | "initialize"
      | "initialize((address))"
      | "keyNft"
      | "keyNft()"
      | "owner"
      | "owner()"
      | "readClimableYield()"
      | "readClimableYield(address)"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "sellShares"
      | "sellShares(address,uint256)"
      | "sharesBalance"
      | "sharesBalance(address,address)"
      | "sharesSupply"
      | "sharesSupply(address)"
      | "tradeContractBlance"
      | "tradeContractBlance()"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "widthdraw"
      | "widthdraw(uint256)"
      | "widthdrawAdmin"
      | "widthdrawAdmin(uint256)"
      | "yieldClaimable"
      | "yieldClaimable(address)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "Initialized(uint64)"
      | "OwnershipTransferred"
      | "OwnershipTransferred(address,address)"
      | "Trade"
      | "Trade(address,address,bool,uint256,uint256,uint256)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blastYieldContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blastYieldContract()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyShares",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyShares(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYield",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYield(uint256,address[])",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [ILongStarShareV1.EditionInitializationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize((address))",
    values: [ILongStarShareV1.EditionInitializationStruct]
  ): string;
  encodeFunctionData(functionFragment: "keyNft", values?: undefined): string;
  encodeFunctionData(functionFragment: "keyNft()", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readClimableYield()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readClimableYield(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellShares",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellShares(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesBalance(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesSupply(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeContractBlance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeContractBlance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "widthdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "widthdraw(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "widthdrawAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "widthdrawAdmin(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldClaimable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldClaimable(address)",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "blastYieldContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blastYieldContract()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyShares(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimYield", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimYield(uint256,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrice(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize((address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyNft()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readClimableYield()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readClimableYield(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellShares(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesBalance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesSupply(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeContractBlance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeContractBlance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "widthdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "widthdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "widthdrawAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "widthdrawAdmin(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldClaimable(address)",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    trader: AddressLike,
    subject: AddressLike,
    isBuy: boolean,
    shareAmount: BigNumberish,
    ethAmount: BigNumberish,
    supply: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    subject: string,
    isBuy: boolean,
    shareAmount: bigint,
    ethAmount: bigint,
    supply: bigint
  ];
  export interface OutputObject {
    trader: string;
    subject: string;
    isBuy: boolean;
    shareAmount: bigint;
    ethAmount: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LongStarShareV1 extends BaseContract {
  connect(runner?: ContractRunner | null): LongStarShareV1;
  waitForDeployment(): Promise<this>;

  interface: LongStarShareV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blastYieldContract: TypedContractMethod<[], [string], "view">;

  "blastYieldContract()": TypedContractMethod<[], [string], "view">;

  buyShares: TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  "buyShares(address,uint256)": TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  claimYield: TypedContractMethod<
    [amount: BigNumberish, claimableArray: AddressLike[]],
    [void],
    "nonpayable"
  >;

  "claimYield(uint256,address[])": TypedContractMethod<
    [amount: BigNumberish, claimableArray: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getBuyPrice: TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  "getBuyPrice(address,uint256)": TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  "getPrice(uint256,uint256)": TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPrice: TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  "getSellPrice(address,uint256)": TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [init: ILongStarShareV1.EditionInitializationStruct],
    [void],
    "nonpayable"
  >;

  "initialize((address))": TypedContractMethod<
    [init: ILongStarShareV1.EditionInitializationStruct],
    [void],
    "nonpayable"
  >;

  keyNft: TypedContractMethod<[], [string], "view">;

  "keyNft()": TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  "owner()": TypedContractMethod<[], [string], "view">;

  "readClimableYield()": TypedContractMethod<[], [bigint], "view">;

  "readClimableYield(address)": TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "renounceOwnership()": TypedContractMethod<[], [void], "nonpayable">;

  sellShares: TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  "sellShares(address,uint256)": TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  sharesBalance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  "sharesBalance(address,address)": TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  sharesSupply: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  "sharesSupply(address)": TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  tradeContractBlance: TypedContractMethod<[], [bigint], "view">;

  "tradeContractBlance()": TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  "transferOwnership(address)": TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  widthdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  "widthdraw(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  widthdrawAdmin: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "widthdrawAdmin(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  yieldClaimable: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  "yieldClaimable(address)": TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blastYieldContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blastYieldContract()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyShares"
  ): TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyShares(address,uint256)"
  ): TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimYield"
  ): TypedContractMethod<
    [amount: BigNumberish, claimableArray: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimYield(uint256,address[])"
  ): TypedContractMethod<
    [amount: BigNumberish, claimableArray: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuyPrice(address,uint256)"
  ): TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice(uint256,uint256)"
  ): TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice(address,uint256)"
  ): TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [init: ILongStarShareV1.EditionInitializationStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize((address))"
  ): TypedContractMethod<
    [init: ILongStarShareV1.EditionInitializationStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "keyNft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "keyNft()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readClimableYield()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "readClimableYield(address)"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellShares"
  ): TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sellShares(address,uint256)"
  ): TypedContractMethod<
    [sharesSubject: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sharesBalance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "sharesBalance(address,address)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "sharesSupply"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "sharesSupply(address)"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradeContractBlance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradeContractBlance()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership(address)"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "widthdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "widthdraw(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "widthdrawAdmin"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "widthdrawAdmin(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "yieldClaimable"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "yieldClaimable(address)"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized(uint64)"
  ): TypedContractEvent<
    Initialized_uint64_Event.InputTuple,
    Initialized_uint64_Event.OutputTuple,
    Initialized_uint64_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;
  getEvent(
    key: "Trade(address,address,bool,uint256,uint256,uint256)"
  ): TypedContractEvent<
    Trade_address_address_bool_uint256_uint256_uint256_Event.InputTuple,
    Trade_address_address_bool_uint256_uint256_uint256_Event.OutputTuple,
    Trade_address_address_bool_uint256_uint256_uint256_Event.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Trade(address,address,bool,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
